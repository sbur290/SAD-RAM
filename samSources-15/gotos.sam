/*testGotos.sam, version 13, Feb, 2023
 Test goto adjustments. 
 For example goto afterblob, and goto idleLoop are initially
 generated as short (ie., 16-bit) opcodes. However both of them
 will be recoded as log jumps (OP_GO_T + 16-bit absolute address).
 In the process short jumps such as goto _mitosis and calls patchThee
 also be adjusted, but goto patchMe is not changed.
 Code such as DW 64'h01 (which looks a lot like an OP_GO_T) will not be changed
*/

#include <stdHeaders.sam>
//  $environment compile only;//software emulation;
    $shocode;                                                       //
#define bug 2                                                       //must be at least 1 to get print to work
jmpTable: goto(long) start;                                         //+0
mitosis:  goto(long) _mitosis;                                      //+6
start:                                                              //
    $bug    = bug;                                                  //
    $curRow = 0;                                                    //[0] contains configuration vector
    $BUG_RAW;                                                       //display row[0]
    cfg(cell);                                                      //configure cells
    cfg(group);                                                     //configure groups
    while (qrdy) {}                                                 //huh ??
idleLup:while (!qrdy) {}                                            //wait for incoming key
    $curRow = 24;          //$bug_indx;                             //set bug level, user bit, and dump current row
    scin(indx) "7CB42901"; //$bug_indx;                             //ok inserted at 0x40
    scin(indx) "7AC20124";   $bug_indx;                             //ok inserted at 0x20
    scin(indx) "7B4401CF";   $bug_indx;                             //ok inserted at 0x40; row 24 is now full
    scin(indx) "7A619125";   $bug_indx;                             //Should report samStatus=Full and not do the insert
    if (full)                                                       //
       {print "Insert 0x$0 failed\n";                               //
        PUSHALL;                                                    //
        call mitosis;                                               //
        POPALL;                                                     //
        scin(indx);                                                 //repeat the operation
goto afterBlob;                                                     //
       }                                                            //
    stop;
    DW 64'h0000000000000000, 64'h0101010101010101, 64'h0202020202020202, 64'h0303030303030303;
    DW 64'h1010101010101010, 64'h1111111111111111, 64'h1212121212121212, 64'h1313131313131313;
    DW 64'h2020202020202020, 64'h2121212121212121, 64'h2222222222222222, 64'h2323232323232323;
    DW 64'h3030303030303030, 64'h3131313131313131, 64'h3232323232323232, 64'h3333333333333333;
    DW 64'h4040404040404040, 64'h4141414141414141, 64'h4242424242424242, 64'h4343434343434343;
    DW 64'h5050505050505050, 64'h5151515151515151, 64'h5252525252525252, 64'h5353535353535353;
    DW 64'h6060606060606060, 64'h6161616161616161, 64'h6262626262626262, 64'h6363636363636363;
    DW 64'h7070707070707070, 64'h7171717171717171, 40'h7272727272;                          
    DW 64'hFFFF_FFFF_FFFF_FFFF; NOOP;                               //stretch to provoke go(long)afterBlob
afterBlob:                                                          //
    goto patchMe;                                                   //
afterPatch:                                                         //
    call patchThee;                                                 //
    if (false) {print "exit test\n"; goto idleLup;}                 //
    stop;                                                           //
_mitosis: goto(long) mitosis1;                                      //
          goto mitosis1;                                            //
 mitosis1:print "Start mitosis\n"; ret;                             //
                                                                    //
patchMe:   print "Patch me\n";   goto afterPatch;                   //
patchThee: $0 = $pc; print "Patch thee 0x$0\n"; ret;                //could also be "...$pc"
//end of file...
 