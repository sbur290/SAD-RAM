//Program sim-15.exe. See Help() for operational iformation.
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <fcntl.h>
#include "sim-15.h"

int cSimDriver::Help(const char *p1, const char *p2)
{char buf[100];
 printf("--------- Sam Simulator #13: " __DATE__ " at " __TIME__ "----------\n" //
 "         Program to drive FPGA simulation of Sadram.\n\n");                   //
 snprintf(buf, sizeof(buf), "%s%s", p1+1, p2 ? p2 : "");                        //
 if (strnicmp(buf,  "hsho", 4) == 0)
    {printf("/showall - display all lines generated by Xilinx tools without filtering.\n"); return 0;}
 if (strnicmp(buf, "hcomp",5) == 0)
    {printf("/compile - perform compile step only (see compile.bat in base Verilog directory.\n"); return 0;}
 if (strnicmp(buf, "hcap", 4) == 0)
    {printf("/capture <fileName> - specify capture file for filtered information.\n"); return 0;}
//f (strnicmp(buf, "htest", 5) == 0) return HelpTests(buf);                     //
 if (strnicmp(buf, "hbugl", 5) == 0)                                            //
    {printf("/buglevel <value> specify debug level.\n"); return 0;}             //
 if (strnicmp(buf, "hmicro",6) == 0)                                            //
    {printf("/microCode <fileName> specifies microcode source file.\n"); return 0;}//
     
 //othewise show general information                                            //
 printf(                                                                        //
 " The program compiles the microcode for the Verilog code, invokes the Xilinx\n"
 " tool xsim.exe to perform the simulation, captures the simulator output,\n"   // 
 " filters and interprets the console out from xsim.exe.\n\n"                   //
 " The relevant output must be encapsulated by Verilog statements:\n"           //
 "     $write(\"##Start Simulation\");\n"                                       //
 " and $write(\"##Endof Simulation\");\n"                                       //
 " Other specialized # lines are used for validate and debugging functions.\n\n"//
#if 0
 " For example, the FPGA module 'dumpIndexbase' $write()s the entire bram\n"    //
 " formatted as follows:\n"                                                     //
 "     $write(\"###Start Dump\");\n"                                            //
 "     $write(\"bram[<rowadr>]: <hex data>    (repeated).\n"                    //
 " and $write(\"###End dump\");\n"                                              //
 " Each bram row contains a row of BRAM. These are used to interpret the\n"    //
 " dump of the indexbase.\n\n"                                                  //
#else
 "For example, lines beginning with '#check<letter>:' are used to $display\n"
 "debugging information from various sections of the code. sim.exe interprets\n"
 "these lines and formats them accordingly.\n"
#endif
 " The Xilinx simulation is invoked from the bat files:\n"                      //
 "     runsim.bat       compile and run the FPGA simulation.\n"                 //
 " or  compile.bat      compile the FPGA code only.\n"                          //
 " residing in the project directory defined by these environment variables:\n" //
 "     'verilogProjectDir'\tdirectory containing project file (.xpr file), \n"  //
 "                        \trunsim.bat, and compile.bat\n"                      //
 "     'verilogSimulationDir'\tdirectory for Xilinx behavioural simulation.\n"  //
 " and 'verilogProjectDir'\tdirectory of verilog source files.\n"               //
 " For example:\n"//                                                            //
 "   setx verilogProjectDir    c:\\myFolders\\sadram\n"                         //
 "   setx verilogSourceDir     c:\\myFolders\\sadram\\sadram.srcs\\sim_1\\new\n"//
 "   setx verilogSimulationDir c:\\myFolders\\sadram\\sadram.sim\\sim_1\\behav\\xsim\n"
 "Program Usage:\n"                                                             //
 "     sim [/showall | /compile | /capture <fileName> | /help |\n"              //
 "          /microCode <fileName> | /test # /buglevel #]\n\n"                   //
 " For help on individual commands enter 'sim-15 /hshowall, /hcompile, etc.\n");//
 return 0;                                                                      //
} //cSimDriver::Help...

int cSimDriver::HelpTests(const char *p1)
{const char *dirP=getenv("verilogSimulationDir");
 printf("/htest    - displays this following help information.\n"
        "/htest #n - displays help information for test n; n=0 thru 3.\n"
        "For example:\n"
        "    sim /test #1   -invoke test1\n\n");
 printf("All tests load operational parameters from the file:\n"
        "\t'%s\\params.data'\n\n", dirP);
 printf("test #1:\n"
        "  - loads the indexbase from the file:\n"
        "\t'%s\\blockRam.data'\n", dirP);
printf( "  - loads a set of user keys into the incoming key queue from:\n"
        "\t'%s\\userKey.data'\n"
        "and passes each of these keys through the sequencer.\n", dirP);
printf( "    All the .data files are prepared using the program sam.exe as follows:\n"
        "       sam <value> /genVerilog     where value = # records.\n"
        "  - displays the first 128 bytes of configuration information.\n"
        "  - executes sequencer search operations on individual rows\n"
        "    and verifies the results.\n");
 return 0;
} //cSimDriver::HelpTests

